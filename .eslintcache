[{"/Users/suyapeng/Desktop/Redux/my-app/src/index.js":"1","/Users/suyapeng/Desktop/Redux/my-app/src/serviceWorker.js":"2","/Users/suyapeng/Desktop/Redux/my-app/src/App.js":"3","/Users/suyapeng/Desktop/Redux/my-app/src/app/store.js":"4","/Users/suyapeng/Desktop/Redux/my-app/src/app/Navbar.js":"5","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/PostsList.js":"6","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/postsSlice.js":"7","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/AddPostForm.js":"8","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/SinglePostPage.js":"9","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/EditPostForm.js":"10","/Users/suyapeng/Desktop/Redux/my-app/src/features/users/usersSlice.js":"11","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/PostAuthor.js":"12","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/TimeAgo.js":"13","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/ReactionButtons.js":"14","/Users/suyapeng/Desktop/Redux/my-app/src/api/server.js":"15","/Users/suyapeng/Desktop/Redux/my-app/src/api/client.js":"16","/Users/suyapeng/Desktop/Redux/my-app/src/features/users/UsersList.js":"17","/Users/suyapeng/Desktop/Redux/my-app/src/features/users/UserPage.js":"18","/Users/suyapeng/Desktop/Redux/my-app/src/features/notifications/NotificationsList.js":"19","/Users/suyapeng/Desktop/Redux/my-app/src/features/notifications/notificationsSlice.js":"20"},{"size":762,"mtime":1612354593873,"results":"21","hashOfConfig":"22"},{"size":5141,"mtime":1612163838003,"results":"23","hashOfConfig":"22"},{"size":1594,"mtime":1612408761995,"results":"24","hashOfConfig":"22"},{"size":401,"mtime":1612408920573,"results":"25","hashOfConfig":"22"},{"size":1363,"mtime":1612410056166,"results":"26","hashOfConfig":"22"},{"size":1774,"mtime":1612353983049,"results":"27","hashOfConfig":"22"},{"size":2917,"mtime":1612355166692,"results":"28","hashOfConfig":"22"},{"size":2565,"mtime":1612355377917,"results":"29","hashOfConfig":"22"},{"size":1131,"mtime":1612351444412,"results":"30","hashOfConfig":"22"},{"size":1674,"mtime":1612351444441,"results":"31","hashOfConfig":"22"},{"size":691,"mtime":1612407021481,"results":"32","hashOfConfig":"22"},{"size":270,"mtime":1612350118643,"results":"33","hashOfConfig":"22"},{"size":415,"mtime":1612350118646,"results":"34","hashOfConfig":"22"},{"size":746,"mtime":1612350118645,"results":"35","hashOfConfig":"22"},{"size":5904,"mtime":1612350118639,"results":"36","hashOfConfig":"22"},{"size":1071,"mtime":1612350118638,"results":"37","hashOfConfig":"22"},{"size":536,"mtime":1612407459932,"results":"38","hashOfConfig":"22"},{"size":837,"mtime":1612407575578,"results":"39","hashOfConfig":"22"},{"size":1492,"mtime":1612409915123,"results":"40","hashOfConfig":"22"},{"size":1372,"mtime":1612409755942,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"1taksr0",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/suyapeng/Desktop/Redux/my-app/src/index.js",["86"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './api/server'\r\nimport { fetchUsers } from \"./features/users/usersSlice\"\r\n\r\nstore.dispatch(fetchUsers())\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n",["87","88"],"/Users/suyapeng/Desktop/Redux/my-app/src/serviceWorker.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/App.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/app/store.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/app/Navbar.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/PostsList.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/postsSlice.js",["89"],"import {createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { sub } from 'date-fns'\nimport { client } from '../../api/client'\n\n\nconst initialState = {\n    posts: [],\n    status: 'idle',\n    error: null\n}\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n    const response = await client.get('/fakeApi/posts')\n    return response.posts\n})\n\nexport const addNewPost = createAsyncThunk(\n    'posts/addNewPost',\n    async initialPost => {\n        const response = await client.post('/fakeApi/posts', { post: initialPost })\n        return response.post\n    }\n)\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        postAdded: {\n            reducer(state, action) {\n                state.posts.push(action.payload)\n            },\n            prepare(title, content, userId) {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        date: new Date().toISOString(),\n                        title,\n                        content,\n                        user: userId,\n                        reactions: {\n                            thumbsUp: 0,\n                            hooray: 0,\n                            heart: 0,\n                            rocket: 0,\n                            eyes: 0,\n                        }\n                    }\n                }\n            }\n        },\n        postUpdated(state, action) {\n            const { id, title, content } = action.payload\n            const existingPost = state.posts.find(post => post.id === id)\n            if (existingPost) {\n                existingPost.title = title\n                existingPost.content = content\n            }\n        },\n        reactionAdded(state, action) {\n            const { postId, reaction } = action.payload\n            const existingPost = state.posts.find(post => post.id === postId)\n            if(existingPost) {\n                existingPost.reactions[reaction] ++\n            }\n        }\n    },\n    extraReducers: {\n        [fetchPosts.pending]: (state, action) => {\n            console.log(action)\n            state.status = 'loading'\n        },\n        [fetchPosts.fulfilled]: (state, action) => {\n            console.log(action)\n            state.status = 'succeeded'\n            state.posts = state.posts.concat(action.payload)\n        },\n        [fetchPosts.rejected]: (state, action) => {\n            state.status = 'failed'\n            state.error = action.error.message\n        },\n        [addNewPost.fulfilled]: (state, action) => {\n            state.posts.push(action.payload)\n        }\n    }\n})\n\nexport default postsSlice.reducer\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport const selectAllPosts = state => state.posts.posts\n\nexport const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId)\n","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/AddPostForm.js",["90"],"import React, { useState } from 'react'\nimport  { useDispatch, useSelector } from \"react-redux\"\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { postAdded } from './postsSlice'\n\nimport { addNewPost } from \"./postsSlice\"\n\nexport const AddPostForm = () => {\n    const [title, setTitle] = useState('')\n    const [content, setContent] = useState('')\n    const [userId, setUserId] = useState('')\n    const [addRequestStatus, setAddRequestStatus] = useState('idle')\n\n    const onTitleChanged = e => setTitle(e.target.value)\n    const onContentChanged = e => setContent(e.target.value)\n    const onAuthorChanged = e => setUserId(e.target.value)\n\n    const dispatch = useDispatch()\n    const users = useSelector(state => state.users)\n\n    const onSavePostClicked = async() => {\n        if(canSave) {\n            try {\n                setAddRequestStatus('pending')\n                const resultAction = await dispatch(addNewPost({ title, content, user: userId}))\n                unwrapResult(resultAction)\n                setTitle('')\n                setContent('')\n                setUserId('')\n            } catch (err) {\n                console.error('Failed to save the post: ', err)\n            } finally {\n                setAddRequestStatus('idle')\n            }\n        }\n    }\n\n    const canSave = [title, content, userId].every(Boolean) && addRequestStatus === 'idle'\n\n    const usersOptions = users.map(user => (\n        <option key={user.id} value={user.id}>\n            {user.name}\n        </option>\n    ))\n\n    return (\n        <section>\n            <h2>Add a New Post</h2>\n            <form>\n                <label htmlFor=\"postTitle\">Post Title:</label>\n                <input\n                    type=\"text\"\n                    id=\"postTitle\"\n                    name=\"postTitle\"\n                    value={title}\n                    onChange={onTitleChanged}\n                />\n                <label htmlFor=\"postAuthor\">Author:</label>\n                <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n                    <option value=\"\"></option>\n                    {usersOptions}\n                </select>\n                <label htmlFor=\"postContent\">Content:</label>\n                <textarea\n                    id=\"postContent\"\n                    name=\"postContent\"\n                    value={content}\n                    onChange={onContentChanged}\n                />\n                <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>Save Post</button>\n            </form>\n        </section>\n    )\n}\n","/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/SinglePostPage.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/EditPostForm.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/users/usersSlice.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/PostAuthor.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/TimeAgo.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/posts/ReactionButtons.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/api/server.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/api/client.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/users/UsersList.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/users/UserPage.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/notifications/NotificationsList.js",[],"/Users/suyapeng/Desktop/Redux/my-app/src/features/notifications/notificationsSlice.js",[],{"ruleId":"91","severity":1,"message":"92","line":7,"column":13,"nodeType":"93","messageId":"94","endLine":7,"endColumn":26},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"91","severity":1,"message":"99","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":13},{"ruleId":"91","severity":1,"message":"100","line":4,"column":10,"nodeType":"93","messageId":"94","endLine":4,"endColumn":19},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["101"],"no-negated-in-lhs",["102"],"'sub' is defined but never used.","'postAdded' is defined but never used.","no-global-assign","no-unsafe-negation"]